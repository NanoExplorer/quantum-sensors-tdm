#! /usr/bin/env python

from detchar.noise import NoiseAcquire
import matplotlib.pyplot as plt
import argparse

def _make_parser_():
    parser = argparse.ArgumentParser(description='Take and plot noise spectrum.')
    parser.add_argument('--row_sequence', type=list, help='Order of row selects sampled within the TDM frame.',default=None)
    parser.add_argument('--indices_to_plot', '--list', type=int, nargs='+', help='Which row_sequence indices will be plotted',default=None)
    parser.add_argument('--column_str', type=str, help='Column string.  For accounting/documentation only.',default='A')
    parser.add_argument('--physical_units', type=bool, help='Convert y axis to physical units',default=True)
    parser.add_argument('--m_ratio', type=float, help='mutual inductance ratio. Only used if physical_units=True',default=8.0)
    parser.add_argument('--rfb_ohm', type=float, help='Feedback resistance in Ohms. Onlu used if physical_units=True',default=1207)
    parser.add_argument('--f_min_hz', type=float, help='Lowest frequency bin in PSD.  Determines length of data acquired.',default=1)
    parser.add_argument('--num_averages', type=int, help='Number of PSDs to take and average',default=10)
    
    args = parser.parse_args()
    return args


args = _make_parser_()
if args.row_sequence is None:
    row_sequence = list(range(32))
else: 
    row_sequence = args.row_sequence 
nn = NoiseAcquire(column_str=args.column_str, row_sequence_list=row_sequence, m_ratio=args.m_ratio, rfb_ohm=args.rfb_ohm, 
                  f_min_hz=args.f_min_hz, num_averages=args.num_averages)
nn.take()
nn.plot_avg_psds(rows=args.indices_to_plot)
plt.show()
